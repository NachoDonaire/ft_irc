!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/ndonaire/ft_irc/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
$(NAME)	Makefile	/^$(NAME) : $(OBJS)$/;"	t
ALLC	Makefile	/^ALLC = $(DSRC)$/;"	m
ASpell	utils/rendu/cpp_module01/ASpell.hpp	/^		ASpell(const ASpell &w) { this->name = w.getName() ; this->effects = w.getEffects();};$/;"	f	class:ASpell
ASpell	utils/rendu/cpp_module01/ASpell.hpp	/^		ASpell(std::string n, std::string t) : name(n), effects(t){};$/;"	f	class:ASpell
ASpell	utils/rendu/cpp_module01/ASpell.hpp	/^class ASpell {$/;"	c
ATarget	utils/rendu/cpp_module01/ATarget.hpp	/^		ATarget(const ATarget &w) { this->type = w.getType();};$/;"	f	class:ATarget
ATarget	utils/rendu/cpp_module01/ATarget.hpp	/^		ATarget(std::string n, std::string t) : type(n), effects(t){};$/;"	f	class:ATarget
ATarget	utils/rendu/cpp_module01/ATarget.hpp	/^class ATarget {$/;"	c
BAD_PSSWD	inc/Client.hpp	/^	BAD_PSSWD,$/;"	e	enum:command
BLANK	inc/Client.hpp	/^	BLANK,$/;"	e	enum:command
BUF_SIZE	client.cpp	/^#define BUF_SIZE /;"	d	file:
BUF_SIZE	src/oldmain.cpp	/^#define BUF_SIZE /;"	d	file:
CAP_END	inc/Client.hpp	/^	CAP_END,$/;"	e	enum:command
CAP_LS	inc/Client.hpp	/^	CAP_LS,$/;"	e	enum:command
CHANNEL_H	inc/Channel.hpp	/^#define CHANNEL_H$/;"	d
CLIENTS	src/main.cpp	/^#define CLIENTS /;"	d	file:
CLIENTS	src/oldnewmain.cpp	/^#define CLIENTS /;"	d	file:
CLIENT_HPP	inc/Client.hpp	/^#define CLIENT_HPP$/;"	d
CMD_ERROR	inc/Client.hpp	/^	CMD_ERROR = -1,$/;"	e	enum:command
CMD_NOTFOUND	inc/Client.hpp	/^	CMD_NOTFOUND,$/;"	e	enum:command
COMMAND_HPP	inc/Command.hpp	/^#define COMMAND_HPP$/;"	d
CXX	Makefile	/^CXX = c++ -Wall -Werror -std=c++98 -I inc$/;"	m
Channel	inc/Channel.hpp	/^class Channel$/;"	c
Channel	src/Channel.cpp	/^Channel::Channel(): users(0), admins(0), topic(""), id(""), password(""), maxUsers(-1), inviteMo/;"	f	class:Channel
Channel	src/Channel.cpp	/^Channel::Channel(const Channel& src)$/;"	f	class:Channel
Channel	src/Channel.cpp	/^Channel::Channel(const std::string id): users(0), admins(0), topic(""), password(""), inviteMode/;"	f	class:Channel
Client	inc/Client.hpp	/^class Client$/;"	c
Client	src/Client.cpp	/^Client::Client()$/;"	f	class:Client
Client	src/Client.cpp	/^Client::Client(int socket, int i, std::string sp, std::string hn) : fd(socket), id(i), servPsswd/;"	f	class:Client
Client	src/OldClient.cpp	/^Client::Client()$/;"	f	class:Client
Client	src/OldClient.cpp	/^Client::Client(int socket, int i, std::string sp, std::string hn) : fd(socket), id(i), servPsswd/;"	f	class:Client
Command	inc/Command.hpp	/^class Command$/;"	c
Command	src/Command.cpp	/^Command::Command()$/;"	f	class:Command
Command	src/Command.cpp	/^Command::Command(Client *l, std::vector<Client> *cl, std::string hostN, std::string ms, std::str/;"	f	class:Command
CreateCppClass	utils/vim-conf/vimrc	/^command! -nargs=1 CreateCppClass call CreateCppClass(<f-args>)$/;"	c
CreateCppClass	utils/vim-conf/vimrc	/^function! CreateCppClass(className)$/;"	f
DSRC	Makefile	/^DSRC = $(addprefix $(SRDIR), $(SRCS))$/;"	m
DefineCppClass	utils/vim-conf/vimrc	/^command! -nargs=1 DefineCppClass call DefineCppClass(<f-args>)$/;"	c
DefineCppClass	utils/vim-conf/vimrc	/^function! DefineCppClass(className)$/;"	f
Dependencies	utils/vim-conf/README.md	/^## Dependencies$/;"	s	chapter:Vim-conf
Done!!	utils/project-initializer/project-initializer.sh	/^		std::cout << "Done!!";$/;"	h
ERROR	inc/Client.hpp	/^	ERROR = -1,$/;"	e	enum:status
ERR_BADCHANNELID	inc/Client.hpp	/^	ERR_BADCHANNELID,$/;"	e	enum:command
ERR_BADCHANNELKEY	inc/Client.hpp	/^	ERR_BADCHANNELKEY,$/;"	e	enum:command
ERR_CHANNELISFULL	inc/Client.hpp	/^	ERR_CHANNELISFULL,$/;"	e	enum:command
ERR_ERRONEUSNICKNAME	inc/Client.hpp	/^	ERR_ERRONEUSNICKNAME,$/;"	e	enum:command
ERR_INVITEONLYCHAN	inc/Client.hpp	/^	ERR_INVITEONLYCHAN,$/;"	e	enum:command
ERR_NEEDMOREPARAMS	inc/Client.hpp	/^	ERR_NEEDMOREPARAMS,$/;"	e	enum:command
ERR_NOSUCHCHANNEL	inc/Client.hpp	/^	ERR_NOSUCHCHANNEL,$/;"	e	enum:command
IP	clienteJM.go	/^	IP   = "127.0.0.1"$/;"	c	package:main
IRCSRV_HPP	inc/Ircsrv.hpp	/^#define IRCSRV_HPP$/;"	d
JOIN_OK	inc/Client.hpp	/^	JOIN_OK,$/;"	e	enum:command
MAX_USERS_PER_CHANNEL	inc/Channel.hpp	/^#define MAX_USERS_PER_CHANNEL	/;"	d
NAME	Makefile	/^NAME = ircserv$/;"	m
NICK_OK	inc/Client.hpp	/^	NICK_OK,$/;"	e	enum:command
NICK_REPEATED	inc/Client.hpp	/^	NICK_REPEATED,$/;"	e	enum:command
NOT_REGISTERED	inc/Client.hpp	/^	NOT_REGISTERED$/;"	e	enum:command
OBJS	Makefile	/^OBJS = $(DSRC:.cpp=.o)$/;"	m
OK_PSSWD	inc/Client.hpp	/^	OK_PSSWD,$/;"	e	enum:command
POLLFD_LIMIT	src/OLDServer.cpp	/^#define POLLFD_LIMIT /;"	d	file:
POLLFD_LIMIT	src/Server.cpp	/^#define POLLFD_LIMIT /;"	d	file:
PORT	client.cpp	/^#define PORT /;"	d	file:
PORT	clienteJM.go	/^	PORT = "6668"$/;"	c	package:main
PRIVMSG	inc/Client.hpp	/^	PRIVMSG,$/;"	e	enum:command
QUIT	inc/Client.hpp	/^	QUIT,$/;"	e	enum:command
REGISTERED	inc/Client.hpp	/^	REGISTERED$/;"	e	enum:status
REGISTER_PENDING	inc/Client.hpp	/^	REGISTER_PENDING,$/;"	e	enum:status
RPL_NAMREPLY	inc/Client.hpp	/^	RPL_NAMREPLY,$/;"	e	enum:command
RPL_TOPIC	inc/Client.hpp	/^	RPL_TOPIC,$/;"	e	enum:command
SERVER_HPP	inc/OLDServer.hpp	/^#define SERVER_HPP$/;"	d
SERVER_HPP	inc/Server.hpp	/^#define SERVER_HPP$/;"	d
SERVER_HPP	inc/oldServer.hpp	/^#define SERVER_HPP$/;"	d
SERVER_IP	client.cpp	/^#define SERVER_IP /;"	d	file:
SRCS	Makefile	/^SRCS = main.cpp	\\$/;"	m
SRDIR	Makefile	/^SRDIR = src\/$/;"	m
Server	inc/OLDServer.hpp	/^class Server$/;"	c
Server	inc/Server.hpp	/^class Server$/;"	c
Server	inc/oldServer.hpp	/^class Server$/;"	c
Server	src/OLDServer.cpp	/^Server::Server()$/;"	f	class:Server
Server	src/OLDServer.cpp	/^Server::Server(char *p, char *pd, std::string hn) : port(p)$/;"	f	class:Server
Server	src/Server.cpp	/^Server::Server()$/;"	f	class:Server
Server	src/Server.cpp	/^Server::Server(char *p, char *pd, std::string hn) : port(p)$/;"	f	class:Server
Server	src/oldServer.cpp	/^Server::Server()$/;"	f	class:Server
Server	src/oldServer.cpp	/^Server::Server(char *p, char *pd) : port(p)$/;"	f	class:Server
TIMEOUT	poll.c	/^#define TIMEOUT /;"	d	file:
USER	inc/Client.hpp	/^	USER,$/;"	e	enum:command
UTILS	utils/README.md	/^# UTILS$/;"	c
Vim-conf	utils/vim-conf/README.md	/^# Vim-conf$/;"	c
WARLOCK_HPP	utils/rendu/cpp_module00/Warlock.hpp	/^#define WARLOCK_HPP$/;"	d
WARLOCK_HPP	utils/rendu/cpp_module01/ASpell.hpp	/^#define WARLOCK_HPP$/;"	d
WARLOCK_HPP	utils/rendu/cpp_module01/ATarget.hpp	/^#define WARLOCK_HPP$/;"	d
WELCOME	inc/Client.hpp	/^	WELCOME,$/;"	e	enum:command
WHO_BEGIN	inc/Client.hpp	/^	WHO_BEGIN,$/;"	e	enum:command
WHO_END	inc/Client.hpp	/^	WHO_END,$/;"	e	enum:command
Warlock	utils/rendu/cpp_module00/Warlock.hpp	/^		Warlock(const Warlock &w) { this->name = w.getTitle() ; this->title = w.getTitle();};$/;"	f	class:Warlock
Warlock	utils/rendu/cpp_module00/Warlock.hpp	/^		Warlock(std::string n, std::string t) : name(n), title(t){};$/;"	f	class:Warlock
Warlock	utils/rendu/cpp_module00/Warlock.hpp	/^class Warlock {$/;"	c
addrinfo	notes/addrinfoScheme.hpp	/^struct addrinfo {$/;"	s
admins	inc/Channel.hpp	/^	std::vector<std::string *>	admins;$/;"	m	class:Channel	typeref:typename:std::vector<std::string * >
ai_addr	notes/addrinfoScheme.hpp	/^	struct sockaddr *ai_addr;$/;"	m	struct:addrinfo	typeref:struct:sockaddr *
ai_addrlen	notes/addrinfoScheme.hpp	/^	socklen_t        ai_addrlen;$/;"	m	struct:addrinfo	typeref:typename:socklen_t
ai_canonname	notes/addrinfoScheme.hpp	/^	char            *ai_canonname;$/;"	m	struct:addrinfo	typeref:typename:char *
ai_family	notes/addrinfoScheme.hpp	/^	int              ai_family;$/;"	m	struct:addrinfo	typeref:typename:int
ai_flags	notes/addrinfoScheme.hpp	/^	int              ai_flags;$/;"	m	struct:addrinfo	typeref:typename:int
ai_next	notes/addrinfoScheme.hpp	/^	struct addrinfo *ai_next;$/;"	m	struct:addrinfo	typeref:struct:addrinfo *
ai_protocol	notes/addrinfoScheme.hpp	/^	int              ai_protocol;$/;"	m	struct:addrinfo	typeref:typename:int
ai_socktype	notes/addrinfoScheme.hpp	/^	int              ai_socktype;$/;"	m	struct:addrinfo	typeref:typename:int
all	Makefile	/^all: $(NAME)$/;"	t
blockSize	clienteJM.go	/^const blockSize = 1024$/;"	c	package:main
cap	src/Command.cpp	/^void	Command::cap(std::vector<std::string> params)$/;"	f	class:Command	typeref:typename:void
cap	src/OldClient.cpp	/^void	Client::cap(std::vector<std::string> params)$/;"	f	class:Client	typeref:typename:void
changeInviteMode	src/Channel.cpp	/^void	Channel::changeInviteMode(const std::string* userId, const bool& value)$/;"	f	class:Channel	typeref:typename:void
changePassword	src/Channel.cpp	/^void	Channel::changePassword(const std::string* userId, const std::string newPassword)$/;"	f	class:Channel	typeref:typename:void
changeTopic	src/Channel.cpp	/^void	Channel::changeTopic(const std::string* userId, const std::string value)$/;"	f	class:Channel	typeref:typename:void
channels	inc/Client.hpp	/^		vectorStr	channels;$/;"	m	class:Client	typeref:typename:vectorStr
channels	inc/Command.hpp	/^		vectorCh					*channels;$/;"	m	class:Command	typeref:typename:vectorCh *
channels	inc/Server.hpp	/^		vectorCh		channels;$/;"	m	class:Server	typeref:typename:vectorCh
checkClientEvents	src/OLDServer.cpp	/^void	Server::checkClientEvents()$/;"	f	class:Server	typeref:typename:void
checkClientEvents	src/Server.cpp	/^void	Server::checkClientEvents()$/;"	f	class:Server	typeref:typename:void
checkInvite	src/Channel.cpp	/^void	Channel::checkInvite(const std::string* senderId)$/;"	f	class:Channel	typeref:typename:void
checkTimeout	clienteJM.go	/^	checkTimeout = 100 * time.Millisecond$/;"	c	package:main
clean	Makefile	/^clean:$/;"	t
clientSock	inc/OLDServer.hpp	/^		struct pollfd	*clientSock;$/;"	m	class:Server	typeref:struct:pollfd *
clientSock	inc/Server.hpp	/^		std::vector<struct pollfd>	clientSock;$/;"	m	class:Server	typeref:typename:std::vector<struct pollfd>
clientSock	inc/oldServer.hpp	/^		struct pollfd	*clientSock;$/;"	m	class:Server	typeref:struct:pollfd *
clients	inc/Command.hpp	/^		std::vector<Client >				*clients;$/;"	m	class:Command	typeref:typename:std::vector<Client> *
clients	inc/OLDServer.hpp	/^		std::vector<Client>	clients;$/;"	m	class:Server	typeref:typename:std::vector<Client>
clients	inc/Server.hpp	/^		std::vector<Client>	clients;$/;"	m	class:Server	typeref:typename:std::vector<Client>
closeConnection	clienteJM.go	/^func closeConnection() {$/;"	f	package:main
cmd	inc/Client.hpp	/^		std::map<int, std::vector<std::string> >	cmd;$/;"	m	class:Client	typeref:typename:std::map<int,std::vector<std::string>>
cmd	inc/Command.hpp	/^		std::map<int, std::vector<std::string> >	cmd;$/;"	m	class:Command	typeref:typename:std::map<int,std::vector<std::string>>
cmdAnalyzer	src/OldClient.cpp	/^int Client::cmdAnalyzer(std::string cmd)$/;"	f	class:Client	typeref:typename:int
cmds	inc/Client.hpp	/^		std::vector<int>	 cmds;$/;"	m	class:Client	typeref:typename:std::vector<int>
command	inc/Client.hpp	/^		int	 	command;$/;"	m	class:Client	typeref:typename:int
command	inc/Client.hpp	/^enum command {$/;"	g
commands	inc/Client.hpp	/^		std::vector<std::string>	commands;$/;"	m	class:Client	typeref:typename:std::vector<std::string>
connection	clienteJM.go	/^var connection net.Conn$/;"	v	package:main	typeref:typename:net.Conn
currentSize	inc/OLDServer.hpp	/^		int		currentSize;$/;"	m	class:Server	typeref:typename:int
currentSize	inc/Server.hpp	/^		int		currentSize;$/;"	m	class:Server	typeref:typename:int
deleteClient	src/Channel.cpp	/^void	Channel::deleteClient(const std::string* userId)$/;"	f	class:Channel	typeref:typename:void
deleteClient	src/Channel.cpp	/^void	Channel::deleteClient(vectorStr& users, const std::string* userId)$/;"	f	class:Channel	typeref:typename:void
effects	utils/rendu/cpp_module01/ASpell.hpp	/^		std::string effects;$/;"	m	class:ASpell	typeref:typename:std::string
emptyCmd	inc/Client.hpp	/^		void	emptyCmd() { this->cmd.clear(); };$/;"	f	class:Client	typeref:typename:void
emptyNCmd	inc/Client.hpp	/^		void	emptyNCmd() { this->cmds.clear(); };$/;"	f	class:Client	typeref:typename:void
emptyResponse	inc/Client.hpp	/^		void	emptyResponse() { this->responses.clear(); };$/;"	f	class:Client	typeref:typename:void
establishConnection	clienteJM.go	/^func establishConnection() net.Conn {$/;"	f	package:main	typeref:typename:net.Conn
establishConnection	src/OLDServer.cpp	/^void	Server::establishConnection()$/;"	f	class:Server	typeref:typename:void
establishConnection	src/Server.cpp	/^void	Server::establishConnection()$/;"	f	class:Server	typeref:typename:void
exit	clienteJM.go	/^func exit() {$/;"	f	package:main
fclean	Makefile	/^fclean: clean$/;"	t
fd	inc/Client.hpp	/^		int	 	fd;$/;"	m	class:Client	typeref:typename:int
findClientByNick	src/Command.cpp	/^Client	*Command::findClientByNick(std::string nick)$/;"	f	class:Command	typeref:typename:Client *
findUser	src/Channel.cpp	/^vectorStr::iterator	Channel::findUser(vectorStr& users, const std::string* userId)$/;"	f	class:Channel	typeref:typename:vectorStr::iterator
ft_irc	README.md	/^# ft_irc$/;"	c
g:ctrlp_custom_ignore	utils/vim-conf/vimrc	/^let g:ctrlp_custom_ignore = {$/;"	v
g:ctrlp_working_path_mode	utils/vim-conf/vimrc	/^let g:ctrlp_working_path_mode = 'ra' " busca en el directorio actual y en sus subdirectorios$/;"	v
g:mucomplete#enable_auto_at_startup	utils/vim-conf/vimrc	/^let g:mucomplete#enable_auto_at_startup = 1$/;"	v
getAdmins	src/Channel.cpp	/^vectorStr Channel::getAdmins() const$/;"	f	class:Channel	typeref:typename:vectorStr
getChannel	src/Command.cpp	/^vectorCh::iterator	Command::getChannel(const str& id)$/;"	f	class:Command	typeref:typename:vectorCh::iterator
getChannels	inc/Server.hpp	/^		vectorCh*			getChannels() { return &this->channels; };$/;"	f	class:Server	typeref:typename:vectorCh *
getChannels	src/Client.cpp	/^vectorStr	Client::getChannels() const$/;"	f	class:Client	typeref:typename:vectorStr
getClients	inc/OLDServer.hpp	/^		std::vector<Client>		*getClients() { return &this->clients; };$/;"	f	class:Server	typeref:typename:std::vector<Client> *
getClients	inc/Server.hpp	/^		std::vector<Client>		*getClients() { return &this->clients; };$/;"	f	class:Server	typeref:typename:std::vector<Client> *
getCmd	inc/Client.hpp	/^		std::map<int, std::vector<std::string> > getCmd() {return this->cmd;};$/;"	f	class:Client	typeref:typename:std::map<int,std::vector<std::string>>
getCmd	inc/Command.hpp	/^		std::map<int, std::vector<std::string> >	getCmd() { return this->cmd;};$/;"	f	class:Command	typeref:typename:std::map<int,std::vector<std::string>>
getCommand	inc/Client.hpp	/^		int	getCommand() { return this->command ;};$/;"	f	class:Client	typeref:typename:int
getCommands	inc/Client.hpp	/^		std::vector<std::string> getCommands() { return this->commands;};$/;"	f	class:Client	typeref:typename:std::vector<std::string>
getEffects	utils/rendu/cpp_module01/ASpell.hpp	/^		std::string getEffects() const {return this->effects;};$/;"	f	class:ASpell	typeref:typename:std::string
getEffects	utils/rendu/cpp_module01/ATarget.hpp	/^		std::string getEffects() const {return this->effects;};$/;"	f	class:ATarget	typeref:typename:std::string
getId	inc/Client.hpp	/^		int getId() { return this->id;};$/;"	f	class:Client	typeref:typename:int
getId	src/Channel.cpp	/^str	Channel::getId() const$/;"	f	class:Channel	typeref:typename:str
getInviteMode	src/Channel.cpp	/^bool	Channel::getInviteMode() const$/;"	f	class:Channel	typeref:typename:bool
getMaxUsers	src/Channel.cpp	/^int Channel::getMaxUsers() const$/;"	f	class:Channel	typeref:typename:int
getMsg	inc/Client.hpp	/^		std::string getMsg() { return this->msg;};$/;"	f	class:Client	typeref:typename:std::string
getNCmd	inc/Client.hpp	/^		std::vector<int>	getNCmd() { return this->cmds; };$/;"	f	class:Client	typeref:typename:std::vector<int>
getName	utils/rendu/cpp_module00/Warlock.hpp	/^		std::string getName() const {return this->name;};$/;"	f	class:Warlock	typeref:typename:std::string
getName	utils/rendu/cpp_module01/ASpell.hpp	/^		std::string getName() const {return this->name;};$/;"	f	class:ASpell	typeref:typename:std::string
getNick	inc/Client.hpp	/^		std::string &getNick() { return (this->nickname);};$/;"	f	class:Client	typeref:typename:std::string &
getOff	inc/Client.hpp	/^		int	getOff() { return this->off;};$/;"	f	class:Client	typeref:typename:int
getParseStatus	src/Client.cpp	/^int	Client::getParseStatus()$/;"	f	class:Client	typeref:typename:int
getParseStatus	src/OldClient.cpp	/^int	Client::getParseStatus()$/;"	f	class:Client	typeref:typename:int
getPassword	src/Channel.cpp	/^str	Channel::getPassword() const$/;"	f	class:Channel	typeref:typename:str
getPollOut	inc/Client.hpp	/^		int	getPollOut() { return this->pollout;};$/;"	f	class:Client	typeref:typename:int
getPortError	inc/Server.hpp	/^		int		getPortError() {return this->portError; } ;$/;"	f	class:Server	typeref:typename:int
getPsswd	inc/Client.hpp	/^		std::string getPsswd() { return this->psswd;};$/;"	f	class:Client	typeref:typename:std::string
getRegister	inc/Client.hpp	/^		int	getRegister() { return this->registered; };$/;"	f	class:Client	typeref:typename:int
getResponses	inc/Client.hpp	/^		std::vector<std::string>	getResponses() { return this->responses; };$/;"	f	class:Client	typeref:typename:std::vector<std::string>
getSocket	inc/Client.hpp	/^		int	getSocket() { return this->fd;};$/;"	f	class:Client	typeref:typename:int
getStatus	inc/Client.hpp	/^		int	getStatus() { return this->status ;};$/;"	f	class:Client	typeref:typename:int
getTitle	utils/rendu/cpp_module00/Warlock.hpp	/^		std::string getTitle() const {return this->name;};$/;"	f	class:Warlock	typeref:typename:std::string
getTopic	src/Channel.cpp	/^str	Channel::getTopic() const$/;"	f	class:Channel	typeref:typename:str
getTopicRestriction	src/Channel.cpp	/^bool	Channel::getTopicRestriction() const$/;"	f	class:Channel	typeref:typename:bool
getType	utils/rendu/cpp_module01/ATarget.hpp	/^		std::string getType() const {return this->type;};$/;"	f	class:ATarget	typeref:typename:std::string
getUser	inc/Client.hpp	/^		std::string getUser() { return this->username;};$/;"	f	class:Client	typeref:typename:std::string
getUsers	src/Channel.cpp	/^vectorStr Channel::getUsers(void) const$/;"	f	class:Channel	typeref:typename:vectorStr
handleCmd	src/Command.cpp	/^void	Command::handleCmd()$/;"	f	class:Command	typeref:typename:void
handleCmd	src/OldClient.cpp	/^void	Client::handleCmd()$/;"	f	class:Client	typeref:typename:void
handleConnections	src/OLDServer.cpp	/^bool	Server::handleConnections()$/;"	f	class:Server	typeref:typename:bool
handleConnections	src/Server.cpp	/^bool	Server::handleConnections()$/;"	f	class:Server	typeref:typename:bool
handleConnections	src/oldServer.cpp	/^bool	Server::handleConnections()$/;"	f	class:Server	typeref:typename:bool
handleFileInputMode	clienteJM.go	/^func handleFileInputMode() {$/;"	f	package:main
handleMessages	src/OLDServer.cpp	/^void	Server::handleMessages()$/;"	f	class:Server	typeref:typename:void
handleMessages	src/Server.cpp	/^void	Server::handleMessages()$/;"	f	class:Server	typeref:typename:void
handleSingleMode	clienteJM.go	/^func handleSingleMode() {$/;"	f	package:main
hostName	inc/Client.hpp	/^		std::string	hostName;$/;"	m	class:Client	typeref:typename:std::string
hostName	inc/Command.hpp	/^		std::string					hostName;$/;"	m	class:Command	typeref:typename:std::string
hostName	inc/OLDServer.hpp	/^		std::string	hostName;$/;"	m	class:Server	typeref:typename:std::string
hostName	inc/Server.hpp	/^		std::string	hostName;$/;"	m	class:Server	typeref:typename:std::string
id	inc/Channel.hpp	/^	std::string 	id;$/;"	m	class:Channel	typeref:typename:std::string
id	inc/Client.hpp	/^		int		id;$/;"	m	class:Client	typeref:typename:int
initializeClients	src/main.cpp	/^void	initializeClients(struct pollfd *csock, int ssock)$/;"	f	typeref:typename:void
initializeClients	src/oldnewmain.cpp	/^void	initializeClients(struct pollfd *csock, int ssock)$/;"	f	typeref:typename:void
inverseBarExpander	clienteJM.go	/^func inverseBarExpander(input *string) {$/;"	f	package:main
inviteMode	inc/Channel.hpp	/^	bool		inviteMode;$/;"	m	class:Channel	typeref:typename:bool
isConnectionAvailable	clienteJM.go	/^func isConnectionAvailable(conn net.Conn) bool {$/;"	f	package:main	typeref:typename:bool
isRegister	src/Channel.cpp	/^bool	Channel::isRegister(std::string* userId)$/;"	f	class:Channel	typeref:typename:bool
join	src/Command.cpp	/^void	Command::join(const std::vector<std::string>& params, str* userId)$/;"	f	class:Command	typeref:typename:void
joinClient	src/Channel.cpp	/^void	Channel::joinClient(std::string* userId, const std::string password, const bool& isAdmin)$/;"	f	class:Channel	typeref:typename:void
joinClient	src/Channel.cpp	/^void 	Channel::joinClient(vectorStr& users, std::string *userId, const bool& isAdmin)$/;"	f	class:Channel	typeref:typename:void
launchAction	src/OldClient.cpp	/^void	Client::launchAction(std::vector<std::string> params)$/;"	f	class:Client	typeref:typename:void
launchServer	src/OLDServer.cpp	/^bool	Server::launchServer()$/;"	f	class:Server	typeref:typename:bool
launchServer	src/Server.cpp	/^bool	Server::launchServer()$/;"	f	class:Server	typeref:typename:bool
launchServer	src/oldServer.cpp	/^bool	Server::launchServer()$/;"	f	class:Server	typeref:typename:bool
launcher	inc/Command.hpp	/^		Client						*launcher;$/;"	m	class:Command	typeref:typename:Client *
lookForAvailableSocket	src/oldServer.cpp	/^int Server::lookForAvailableSocket()$/;"	f	class:Server	typeref:typename:int
main	client.cpp	/^int main() {$/;"	f	typeref:typename:int
main	clienteJM.go	/^func main() {$/;"	f	package:main
main	clienteJM.go	/^package main$/;"	p
main	poll.c	/^int main (void)$/;"	f	typeref:typename:int
main	src/main.cpp	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
main	src/oldmain.cpp	/^int main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	src/oldnewmain.cpp	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
mark	src/OLDServer.cpp	/^void	Server::mark(Client *c, std::string msg, std::map<int, std::vector<std::string> > cm)$/;"	f	class:Server	typeref:typename:void
mark	src/Server.cpp	/^void	Server::mark(Client *c, std::string msg)\/\/, std::map<int, std::vector<std::string> > cm)$/;"	f	class:Server	typeref:typename:void
markAction	src/Command.cpp	/^void	Command::markAction(std::vector<std::string> params)$/;"	f	class:Command	typeref:typename:void
markChannelPollOut	src/Command.cpp	/^void	Command::markChannelPollOut(std::vector<Channel> *ch, std::vector<std::string> dest, std::v/;"	f	class:Command	typeref:typename:void
markClientsPollOut	src/Command.cpp	/^void	Command::markClientsPollOut(std::vector<Client> *clients, std::vector<std::string> dest, st/;"	f	class:Command	typeref:typename:void
markEverything	src/Command.cpp	/^void	Command::markEverything(int cmd, std::vector<std::string> params)$/;"	f	class:Command	typeref:typename:void
markie	src/Command.cpp	/^void	Command::markie(Client *c, std::vector<std::string> params, int cmd)$/;"	f	class:Command	typeref:typename:void
maxUsers	inc/Channel.hpp	/^	unsigned int 	maxUsers;$/;"	m	class:Channel	typeref:typename:unsigned int
modeFileReq	clienteJM.go	/^func modeFileReq() string {$/;"	f	package:main	typeref:typename:string
modeSelect	clienteJM.go	/^var modeSelect int$/;"	v	package:main	typeref:typename:int
modeSingleReq	clienteJM.go	/^func modeSingleReq() string {$/;"	f	package:main	typeref:typename:string
msg	inc/Client.hpp	/^		std::string	msg;$/;"	m	class:Client	typeref:typename:std::string
msg	inc/Command.hpp	/^		std::string					msg;$/;"	m	class:Command	typeref:typename:std::string
msgGenerator	src/OldClient.cpp	/^std::string	Client::msgGenerator(int msg, std::vector<std::string> params)$/;"	f	class:Client	typeref:typename:std::string
name	utils/rendu/cpp_module00/Warlock.hpp	/^		std::string name;$/;"	m	class:Warlock	typeref:typename:std::string
name	utils/rendu/cpp_module01/ASpell.hpp	/^		std::string name;$/;"	m	class:ASpell	typeref:typename:std::string
nameAdmin	src/Channel.cpp	/^std::string	Channel::nameAdmin(std::string admin)$/;"	f	class:Channel	typeref:typename:std::string
newScanner	clienteJM.go	/^func newScanner() *bufio.Scanner {$/;"	f	package:main	typeref:typename:*bufio.Scanner
nick	src/Command.cpp	/^int	Command::nick(std::vector<std::string> params)$/;"	f	class:Command	typeref:typename:int
nick	src/OldClient.cpp	/^int	Client::nick(std::vector<std::string> params)$/;"	f	class:Client	typeref:typename:int
nickname	inc/Client.hpp	/^		std::string	nickname;$/;"	m	class:Client	typeref:typename:std::string
notEnoughParams	src/OldClient.cpp	/^void	Client::notEnoughParams(std::vector<std::string> params)$/;"	f	class:Client	typeref:typename:void
notRegistered	src/Command.cpp	/^void	Command::notRegistered(std::vector<std::string> params)$/;"	f	class:Command	typeref:typename:void
off	inc/Client.hpp	/^		int		off;$/;"	m	class:Client	typeref:typename:int
operator =	src/Channel.cpp	/^Channel& Channel::operator = (const Channel& src)$/;"	f	class:Channel	typeref:typename:Channel &
operator =	src/Client.cpp	/^Client* Client::operator=(const Client* f)$/;"	f	class:Client	typeref:typename:Client *
operator =	src/Command.cpp	/^Command& Command::operator=(const Command& f)$/;"	f	class:Command	typeref:typename:Command &
operator =	utils/rendu/cpp_module00/Warlock.hpp	/^		Warlock	&operator=(const Warlock &w){if (this != &w){this->name = w.getName(); this->title = w/;"	f	class:Warlock	typeref:typename:Warlock &
operator =	utils/rendu/cpp_module01/ASpell.hpp	/^		ASpell	&operator=(const ASpell &w){if (this != &w){this->name = w.getName(); this->effects = w/;"	f	class:ASpell	typeref:typename:ASpell &
operator =	utils/rendu/cpp_module01/ATarget.hpp	/^		ATarget	&operator=(const ATarget &w){if (this != &w){this->type = w.getType();}return *this;};$/;"	f	class:ATarget	typeref:typename:ATarget &
parseChannelId	src/Channel.cpp	/^int	Channel::parseChannelId(str src) const$/;"	f	class:Channel	typeref:typename:int
parseMsg	src/Client.cpp	/^int Client::parseMsg()$/;"	f	class:Client	typeref:typename:int
parseMsg	src/Command.cpp	/^int Command::parseMsg()$/;"	f	class:Command	typeref:typename:int
parseMsg	src/OldClient.cpp	/^int Client::parseMsg()$/;"	f	class:Client	typeref:typename:int
parseNick	src/Command.cpp	/^int	Command::parseNick(std::string nick)$/;"	f	class:Command	typeref:typename:int
parseStatus	inc/Client.hpp	/^		int		parseStatus;$/;"	m	class:Client	typeref:typename:int
pass	src/Command.cpp	/^int	Command::pass(std::vector<std::string> params)$/;"	f	class:Command	typeref:typename:int
pass	src/OLDServer.cpp	/^void	Server::pass(Client c) const$/;"	f	class:Server	typeref:typename:void
pass	src/OldClient.cpp	/^int	Client::pass(std::vector<std::string> params)$/;"	f	class:Client	typeref:typename:int
password	inc/Channel.hpp	/^	std::string 	password;$/;"	m	class:Channel	typeref:typename:std::string
percentageExpander	clienteJM.go	/^func percentageExpander(input *string) {$/;"	f	package:main
pollfdLen	src/OLDServer.cpp	/^int	Server::pollfdLen()$/;"	f	class:Server	typeref:typename:int
pollout	inc/Client.hpp	/^		bool		pollout;$/;"	m	class:Client	typeref:typename:bool
pollout	src/Server.cpp	/^void	Server::pollout(int ref)$/;"	f	class:Server	typeref:typename:void
popAllCoincidences	src/Command.cpp	/^void	Command::popAllCoincidences(std::vector<std::string> *vec, std::string coincidence)$/;"	f	class:Command	typeref:typename:void
port	inc/OLDServer.hpp	/^		char		*port;$/;"	m	class:Server	typeref:typename:char *
port	inc/Server.hpp	/^		std::string	port;$/;"	m	class:Server	typeref:typename:std::string
port	inc/oldServer.hpp	/^		char		*port;$/;"	m	class:Server	typeref:typename:char *
portError	inc/Server.hpp	/^		int		portError;$/;"	m	class:Server	typeref:typename:int
printAddrInfo	src/oldmain.cpp	/^void	printAddrInfo(struct addrinfo *r)$/;"	f	typeref:typename:void
printAdminUsers	src/Channel.cpp	/^void	Channel::printAdminUsers() const$/;"	f	class:Channel	typeref:typename:void
printClientSock	src/Server.cpp	/^void	Server::printClientSock()$/;"	f	class:Server	typeref:typename:void
printCmd	src/Client.cpp	/^void	Client::printCmd()$/;"	f	class:Client	typeref:typename:void
printMultiMessages	clienteJM.go	/^func printMultiMessages(conexion net.Conn) string {$/;"	f	package:main	typeref:typename:string
printShait	src/Client.cpp	/^void	Client::printShait()$/;"	f	class:Client	typeref:typename:void
printShait	src/Command.cpp	/^void	Command::printShait()$/;"	f	class:Command	typeref:typename:void
printeito	src/Client.cpp	/^void	Client::printeito()$/;"	f	class:Client	typeref:typename:void
printpfd	src/OLDServer.cpp	/^void	Server::printpfd(struct pollfd *src, int size)$/;"	f	class:Server	typeref:typename:void
privmsg	src/Command.cpp	/^void	Command::privmsg(std::vector<std::string> params)$/;"	f	class:Command	typeref:typename:void
processInput	clienteJM.go	/^func processInput(input *string) {$/;"	f	package:main
project-initializer	utils/project-initializer/README.md	/^# project-initializer$/;"	c
psswd	inc/Client.hpp	/^		std::string	psswd;$/;"	m	class:Client	typeref:typename:std::string
psswd	inc/OLDServer.hpp	/^		std::string	psswd;$/;"	m	class:Server	typeref:typename:std::string
psswd	inc/Server.hpp	/^		std::string	psswd;$/;"	m	class:Server	typeref:typename:std::string
psswd	inc/oldServer.hpp	/^		std::string	psswd;$/;"	m	class:Server	typeref:typename:std::string
quit	src/Command.cpp	/^void	Command::quit(std::vector<std::string> params)$/;"	f	class:Command	typeref:typename:void
quit	src/OldClient.cpp	/^void	Client::quit(std::vector<std::string> params)$/;"	f	class:Client	typeref:typename:void
re	Makefile	/^re: fclean all$/;"	t
readTimeout	clienteJM.go	/^	readTimeout  = 300 * time.Millisecond$/;"	c	package:main
reallocPlus	src/Server.cpp	/^void	Server::reallocPlus()$/;"	f	class:Server	typeref:typename:void
reallocPollFd	src/OLDServer.cpp	/^int	Server::reallocPollFd(int index)$/;"	f	class:Server	typeref:typename:int
recData	inc/OLDServer.hpp	/^		char 		recData[512];$/;"	m	class:Server	typeref:typename:char[512]
recData	inc/Server.hpp	/^		char 		recData[512];$/;"	m	class:Server	typeref:typename:char[512]
recData	inc/oldServer.hpp	/^		char 		recData[500];$/;"	m	class:Server	typeref:typename:char[500]
receiveMultiMessagesToString	clienteJM.go	/^func receiveMultiMessagesToString(conexion net.Conn) string {$/;"	f	package:main	typeref:typename:string
registered	inc/Client.hpp	/^		int		registered;$/;"	m	class:Client	typeref:typename:int
responseGenerator	src/Command.cpp	/^std::string	Command::responseGenerator(int msg, std::vector<std::string> params)$/;"	f	class:Command	typeref:typename:std::string
responses	inc/Client.hpp	/^		std::vector<std::string> responses;$/;"	m	class:Client	typeref:typename:std::vector<std::string>
rp	inc/OLDServer.hpp	/^		struct addrinfo	*rp;$/;"	m	class:Server	typeref:struct:addrinfo *
rp	inc/Server.hpp	/^		struct addrinfo	*rp;$/;"	m	class:Server	typeref:struct:addrinfo *
rp	inc/oldServer.hpp	/^		struct addrinfo	*rp;$/;"	m	class:Server	typeref:struct:addrinfo *
scanner	clienteJM.go	/^var scanner *bufio.Scanner$/;"	v	package:main	typeref:typename:*bufio.Scanner
selectMode	clienteJM.go	/^func selectMode() string {$/;"	f	package:main	typeref:typename:string
servPsswd	inc/Client.hpp	/^		std::string	servPsswd;$/;"	m	class:Client	typeref:typename:std::string
servPsswd	inc/Command.hpp	/^		std::string					servPsswd;$/;"	m	class:Command	typeref:typename:std::string
serverSock	inc/OLDServer.hpp	/^		int		serverSock;$/;"	m	class:Server	typeref:typename:int
serverSock	inc/Server.hpp	/^		int		serverSock;$/;"	m	class:Server	typeref:typename:int
serverSock	inc/oldServer.hpp	/^		int		serverSock;$/;"	m	class:Server	typeref:typename:int
setAdmins	src/Channel.cpp	/^void	Channel::setAdmins(vectorStr src)$/;"	f	class:Channel	typeref:typename:void
setChannels	src/Client.cpp	/^void		Client::setChannels(const vectorStr& newChannels)$/;"	f	class:Client	typeref:typename:void
setCommand	inc/Client.hpp	/^		void	setCommand(int i) { this->command = i;};$/;"	f	class:Client	typeref:typename:void
setId	src/Channel.cpp	/^void	Channel::setId(str src)$/;"	f	class:Channel	typeref:typename:void
setInviteMode	src/Channel.cpp	/^void	Channel::setInviteMode(bool src)$/;"	f	class:Channel	typeref:typename:void
setMaxUsers	src/Channel.cpp	/^void	Channel::setMaxUsers(int src)$/;"	f	class:Channel	typeref:typename:void
setMsg	src/Client.cpp	/^void	Client::setMsg(std::string message)$/;"	f	class:Client	typeref:typename:void
setMsg	src/OldClient.cpp	/^void	Client::setMsg(std::string message)$/;"	f	class:Client	typeref:typename:void
setNCmd	inc/Client.hpp	/^		void	setNCmd(int i) { this->cmds.push_back(i);};$/;"	f	class:Client	typeref:typename:void
setNick	src/Client.cpp	/^void	Client::setNick(std::string n)$/;"	f	class:Client	typeref:typename:void
setNick	src/OldClient.cpp	/^void	Client::setNick(std::string n)$/;"	f	class:Client	typeref:typename:void
setOff	inc/Client.hpp	/^		void	setOff(int n) { this->off = n;};$/;"	f	class:Client	typeref:typename:void
setPassword	src/Channel.cpp	/^void	Channel::setPassword(str src)$/;"	f	class:Channel	typeref:typename:void
setPollOut	inc/Client.hpp	/^		void	setPollOut(bool n) { this->pollout = n;};$/;"	f	class:Client	typeref:typename:void
setPsswd	src/Client.cpp	/^void	Client::setPsswd(std::string p)$/;"	f	class:Client	typeref:typename:void
setPsswd	src/OldClient.cpp	/^void	Client::setPsswd(std::string p)$/;"	f	class:Client	typeref:typename:void
setRegister	inc/Client.hpp	/^		void	setRegister(int i) { this->registered = i;};$/;"	f	class:Client	typeref:typename:void
setResponse	inc/Client.hpp	/^		void	setResponse(std::string r) { this->responses.push_back(r);};$/;"	f	class:Client	typeref:typename:void
setStatus	inc/Client.hpp	/^		void	setStatus(int n) { this->status = n;};$/;"	f	class:Client	typeref:typename:void
setTitle	utils/rendu/cpp_module00/Warlock.hpp	/^		void	    setTitle(const std::string &t) {if (title == t) {return ;} this->title = t;};$/;"	f	class:Warlock	typeref:typename:void
setTopic	src/Channel.cpp	/^void	Channel::setTopic(str src)$/;"	f	class:Channel	typeref:typename:void
setTopicRestriction	src/Channel.cpp	/^void	Channel::setTopicRestriction(const bool& src)$/;"	f	class:Channel	typeref:typename:void
setUser	inc/Client.hpp	/^		void	setUser(std::string u) { this->username = u;};$/;"	f	class:Client	typeref:typename:void
setUsers	src/Channel.cpp	/^void 	Channel::setUsers(vectorStr src)$/;"	f	class:Channel	typeref:typename:void
split	src/Client.cpp	/^std::vector<std::string> Client::split(std::string na, const char *c)$/;"	f	class:Client	typeref:typename:std::vector<std::string>
split	src/Command.cpp	/^std::vector<std::string> Command::split(std::string na, const char *c)$/;"	f	class:Command	typeref:typename:std::vector<std::string>
split	src/OldClient.cpp	/^std::vector<std::string> Client::split(std::string na, const char *c)$/;"	f	class:Client	typeref:typename:std::vector<std::string>
splitString	src/Command.cpp	/^std::vector<std::string> splitString(const std::string& str, char delimiter) {$/;"	f	typeref:typename:std::vector<std::string>
status	inc/Client.hpp	/^		int		status;$/;"	m	class:Client	typeref:typename:int
status	inc/Client.hpp	/^enum status {$/;"	g
str	inc/Channel.hpp	/^typedef std::string  			str;$/;"	t	typeref:typename:std::string
str	inc/Client.hpp	/^typedef std::string 			str;$/;"	t	typeref:typename:std::string
str	inc/Command.hpp	/^typedef std::string		str;$/;"	t	typeref:typename:std::string
stringToEnum	src/Command.cpp	/^int Command::stringToEnum(const str& str) {$/;"	f	class:Command	typeref:typename:int
title	utils/rendu/cpp_module00/Warlock.hpp	/^		std::string title;$/;"	m	class:Warlock	typeref:typename:std::string
topic	inc/Channel.hpp	/^	std::string 	topic;$/;"	m	class:Channel	typeref:typename:std::string
topicRestriction	inc/Channel.hpp	/^	bool		topicRestriction;$/;"	m	class:Channel	typeref:typename:bool
type	utils/rendu/cpp_module01/ATarget.hpp	/^		std::string type;$/;"	m	class:ATarget	typeref:typename:std::string
user	src/Command.cpp	/^int	Command::user(std::vector<std::string> params)$/;"	f	class:Command	typeref:typename:int
user	src/OldClient.cpp	/^int	Client::user(std::vector<std::string> params)$/;"	f	class:Client	typeref:typename:int
username	inc/Client.hpp	/^		std::string	username;$/;"	m	class:Client	typeref:typename:std::string
users	inc/Channel.hpp	/^	vectorStr	users;$/;"	m	class:Channel	typeref:typename:vectorStr
vectorCh	inc/Command.hpp	/^typedef std::vector<Channel>	vectorCh;$/;"	t	typeref:typename:std::vector<Channel>
vectorCh	inc/Server.hpp	/^typedef std::vector<Channel>	vectorCh;$/;"	t	typeref:typename:std::vector<Channel>
vectorStr	inc/Channel.hpp	/^typedef std::vector<std::string *> 	vectorStr;$/;"	t	typeref:typename:std::vector<std::string * >
vectorStr	inc/Client.hpp	/^typedef std::vector<std::string *> 	vectorStr;$/;"	t	typeref:typename:std::vector<std::string * >
welcome	src/Command.cpp	/^int Command::welcome(std::vector<std::string> params)$/;"	f	class:Command	typeref:typename:int
welcome	src/OldClient.cpp	/^int Client::welcome()$/;"	f	class:Client	typeref:typename:int
who	src/Command.cpp	/^void	Command::who(std::vector<std::string> params)$/;"	f	class:Command	typeref:typename:void
~ASpell	utils/rendu/cpp_module01/ASpell.hpp	/^		~ASpell(){};$/;"	f	class:ASpell
~ATarget	utils/rendu/cpp_module01/ATarget.hpp	/^		~ATarget(){};$/;"	f	class:ATarget
~Channel	src/Channel.cpp	/^Channel::~Channel()$/;"	f	class:Channel
~Client	src/Client.cpp	/^Client::~Client()$/;"	f	class:Client
~Client	src/OldClient.cpp	/^Client::~Client()$/;"	f	class:Client
~Command	src/Command.cpp	/^Command::~Command()$/;"	f	class:Command
~Server	src/OLDServer.cpp	/^Server::~Server()$/;"	f	class:Server
~Server	src/Server.cpp	/^Server::~Server()$/;"	f	class:Server
~Server	src/oldServer.cpp	/^Server::~Server()$/;"	f	class:Server
~Warlock	utils/rendu/cpp_module00/Warlock.hpp	/^		~Warlock(){};$/;"	f	class:Warlock
